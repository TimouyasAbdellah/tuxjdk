Index: jdk8-tuxjdk/jdk/src/share/classes/javax/swing/UIManager.java
===================================================================
--- jdk8-tuxjdk.orig/jdk/src/share/classes/javax/swing/UIManager.java
+++ jdk8-tuxjdk/jdk/src/share/classes/javax/swing/UIManager.java
@@ -42,10 +42,12 @@ import javax.swing.border.Border;
 
 import javax.swing.event.SwingPropertyChangeSupport;
 import java.beans.PropertyChangeListener;
+import java.io.BufferedInputStream;
 
 import java.io.Serializable;
 import java.io.File;
 import java.io.FileInputStream;
+import java.io.InputStream;
 
 import java.util.ArrayList;
 import java.util.Properties;
@@ -277,25 +279,6 @@ public class UIManager implements Serial
     }
 
     /**
-     * The location of the <code>swing.properties</code> property file is
-     * implementation-specific.
-     * It is typically located in the <code>lib</code> subdirectory of the Java
-     * installation directory. This method returns a bogus filename
-     * if <code>java.home</code> isn't defined.
-     */
-    private static String makeSwingPropertiesFilename() {
-        String sep = File.separator;
-        // No need to wrap this in a doPrivileged as it's called from
-        // a doPrivileged.
-        String javaHome = System.getProperty("java.home");
-        if (javaHome == null) {
-            javaHome = "<java.home undefined>";
-        }
-        return javaHome + sep + "lib" + sep + "swing.properties";
-    }
-
-
-    /**
      * Provides a little information about an installed
      * <code>LookAndFeel</code> for the sake of configuring a menu or
      * for initial application set up.
@@ -1223,46 +1206,63 @@ public class UIManager implements Serial
             return new Properties();
         }
         else {
-            final Properties props = new Properties();
-
-            java.security.AccessController.doPrivileged(
-                new java.security.PrivilegedAction<Object>() {
-                public Object run() {
-                    OSInfo.OSType osType = AccessController.doPrivileged(OSInfo.getOSTypeAction());
-                    if (osType == OSInfo.OSType.MACOSX) {
-                        props.put(defaultLAFKey, getSystemLookAndFeelClassName());
+            return java.security.AccessController.doPrivileged(
+                new java.security.PrivilegedAction<Properties>() {
+                public Properties run() {
+                    // if you're not on Linux - you should not apply this patch:
+                    Properties installationWide = null;
+                    Properties systemWide = null;
+                    Properties userWide = null;
+                    
+                    // just for backward compatibility:
+                    String sep = File.separator;
+                    String javaHome = System.getProperty("java.home");
+                    if (javaHome != null) {
+                        installationWide = readPropertiesFromFile(javaHome + "/lib/swing.properties", null);
                     }
-
-                    try {
-                        File file = new File(makeSwingPropertiesFilename());
-
-                        if (file.exists()) {
-                            // InputStream has been buffered in Properties
-                            // class
-                            FileInputStream ins = new FileInputStream(file);
-                            props.load(ins);
-                            ins.close();
-                        }
+                    // system-specific configuration in /etc:
+                    systemWide = readPropertiesFromFile("/etc/java/swing.properties", installationWide);
+                    
+                    // user-specific configuration in user home:
+                    String userHome = System.getProperty("user.home");
+                    if (userHome != null) {
+                        userWide = readPropertiesFromFile(userHome + "/.config/java/swing.properties", systemWide);
                     }
-                    catch (Exception e) {
-                        // No such file, or file is otherwise non-readable.
+                    
+                    if (userWide == null) {
+                        return new Properties();
                     }
 
                     // Check whether any properties were overridden at the
                     // command line.
-                    checkProperty(props, defaultLAFKey);
-                    checkProperty(props, auxiliaryLAFsKey);
-                    checkProperty(props, multiplexingLAFKey);
-                    checkProperty(props, installedLAFsKey);
-                    checkProperty(props, disableMnemonicKey);
+                    checkProperty(userWide, defaultLAFKey);
+                    checkProperty(userWide, auxiliaryLAFsKey);
+                    checkProperty(userWide, multiplexingLAFKey);
+                    checkProperty(userWide, installedLAFsKey);
+                    checkProperty(userWide, disableMnemonicKey);
                     // Don't care about return value.
-                    return null;
+                    return userWide;
                 }
             });
-            return props;
         }
     }
 
+    private static Properties readPropertiesFromFile(String filePath, Properties defaults) {
+        File file = new File(filePath);
+        if (file.exists() && file.isFile() && file.canRead()) {
+            try (InputStream in = new BufferedInputStream(new FileInputStream(file))) {
+                Properties properties = defaults == null ? new Properties() : new Properties(defaults);
+                properties.load(in);
+                return properties;
+            } catch (Exception ignore) {
+                // ignore
+            }
+        }
+        // if we are sill here - there is no file,
+        // we will return defaults regardless if its null or not:
+        return defaults;
+    }
+
     private static void checkProperty(Properties props, String key) {
         // No need to do catch the SecurityException here, this runs
         // in a doPrivileged.
