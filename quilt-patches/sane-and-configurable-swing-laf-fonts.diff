Index: jdk8-tuxjdk/jdk/src/share/classes/javax/swing/UIManager.java
===================================================================
--- jdk8-tuxjdk.orig/jdk/src/share/classes/javax/swing/UIManager.java
+++ jdk8-tuxjdk/jdk/src/share/classes/javax/swing/UIManager.java
@@ -192,6 +192,9 @@ public class UIManager implements Serial
     {
         Properties swingProps;
         private UIDefaults[] tables = new UIDefaults[2];
+        
+        @Deprecated
+        int defaultFontSizeTuxjdkSpecific;
 
         boolean initialized = false;
         boolean focusPolicyInitialized = false;
@@ -1147,6 +1150,11 @@ public class UIManager implements Serial
             return rv;
         }
     }
+    
+    @Deprecated
+    static public int getDefaultFontSizeTuxjdkSpecific() {
+        return getLAFState().defaultFontSizeTuxjdkSpecific;
+    }
 
 
     /**
@@ -1412,6 +1420,21 @@ public class UIManager implements Serial
     }
 
 
+    private static void initializeFontDefaults(Properties swingProps) {
+        String fontSizeProperty = swingProps.getProperty("swing.defaultFontSize");
+        if (fontSizeProperty != null) {
+            try {
+                int value = Integer.parseInt(fontSizeProperty);
+                getLAFState().defaultFontSizeTuxjdkSpecific = value;
+                return;
+            } catch (Exception ignore) {
+            }
+        }
+        // if we are still here - something went wrong and we have to use default value:
+        getLAFState().defaultFontSizeTuxjdkSpecific = 9;
+    }
+
+
     /*
      * This method is called before any code that depends on the
      * <code>AppContext</code> specific LAFState object runs.  When the AppContext
@@ -1456,6 +1479,7 @@ public class UIManager implements Serial
     private static void initialize() {
         Properties swingProps = loadSwingProperties();
         initializeSystemDefaults(swingProps);
+        initializeFontDefaults(swingProps);
         initializeDefaultLAF(swingProps);
         initializeAuxiliaryLAFs(swingProps);
         initializeInstalledLAFs(swingProps);
Index: jdk8-tuxjdk/jdk/src/share/classes/javax/swing/plaf/metal/DefaultMetalTheme.java
===================================================================
--- jdk8-tuxjdk.orig/jdk/src/share/classes/javax/swing/plaf/metal/DefaultMetalTheme.java
+++ jdk8-tuxjdk/jdk/src/share/classes/javax/swing/plaf/metal/DefaultMetalTheme.java
@@ -90,30 +90,11 @@ import sun.swing.SwingUtilities2;
  */
 public class DefaultMetalTheme extends MetalTheme {
     /**
-     * Whether or not fonts should be plain.  This is only used if
-     * the defaults property 'swing.boldMetal' == "false".
-     */
-    private static final boolean PLAIN_FONTS;
-
-    /**
      * Names of the fonts to use.
      */
     private static final String[] fontNames = {
         Font.DIALOG,Font.DIALOG,Font.DIALOG,Font.DIALOG,Font.DIALOG,Font.DIALOG
     };
-    /**
-     * Styles for the fonts.  This is ignored if the defaults property
-     * <code>swing.boldMetal</code> is false, or PLAIN_FONTS is true.
-     */
-    private static final int[] fontStyles = {
-        Font.BOLD, Font.PLAIN, Font.PLAIN, Font.BOLD, Font.BOLD, Font.PLAIN
-    };
-    /**
-     * Sizes for the fonts.
-     */
-    private static final int[] fontSizes = {
-        12, 12, 12, 12, 12, 10
-    };
 
     // note the properties listed here can currently be used by people
     // providing runtimes to hint what fonts are good.  For example the bold
@@ -145,32 +126,20 @@ public class DefaultMetalTheme extends M
      * Returns the ideal font size for the font identified by key.
      */
     static int getDefaultFontSize(int key) {
-        return fontSizes[key];
+        int value = UIManager.getDefaultFontSizeTuxjdkSpecific();
+        if (key == SUB_TEXT_FONT) {
+            // doing precise operation and then cutting the tail:
+            double d = value * 0.9d;
+            value = (int) d;
+        }
+        return value;
     }
 
     /**
      * Returns the ideal font style for the font identified by key.
      */
     static int getDefaultFontStyle(int key) {
-        if (key != WINDOW_TITLE_FONT) {
-            Object boldMetal = null;
-            if (AppContext.getAppContext().get(
-                    SwingUtilities2.LAF_STATE_KEY) != null) {
-                // Only access the boldMetal key if a look and feel has
-                // been loaded, otherwise we'll trigger loading the look
-                // and feel.
-                boldMetal = UIManager.get("swing.boldMetal");
-            }
-            if (boldMetal != null) {
-                if (Boolean.FALSE.equals(boldMetal)) {
-                    return Font.PLAIN;
-                }
-            }
-            else if (PLAIN_FONTS) {
-                return Font.PLAIN;
-            }
-        }
-        return fontStyles[key];
+        return Font.PLAIN;
     }
 
     /**
@@ -180,17 +149,6 @@ public class DefaultMetalTheme extends M
         return defaultNames[key];
     }
 
-    static {
-        Object boldProperty = java.security.AccessController.doPrivileged(
-            new GetPropertyAction("swing.boldMetal"));
-        if (boldProperty == null || !"false".equals(boldProperty)) {
-            PLAIN_FONTS = false;
-        }
-        else {
-            PLAIN_FONTS = true;
-        }
-    }
-
     private static final ColorUIResource primary1 = new ColorUIResource(
                               102, 102, 153);
     private static final ColorUIResource primary2 = new ColorUIResource(153,
Index: jdk8-tuxjdk/jdk/src/share/classes/com/sun/java/swing/plaf/gtk/PangoFonts.java
===================================================================
--- jdk8-tuxjdk.orig/jdk/src/share/classes/com/sun/java/swing/plaf/gtk/PangoFonts.java
+++ jdk8-tuxjdk/jdk/src/share/classes/com/sun/java/swing/plaf/gtk/PangoFonts.java
@@ -159,32 +159,6 @@ class PangoFonts {
          * equivalent sizes. If such a change were ever to be made in GTK
          * we would need to update for that.
          */
-        double dsize = size;
-        int dpi = 96;
-        Object value =
-            Toolkit.getDefaultToolkit().getDesktopProperty("gnome.Xft/DPI");
-        if (value instanceof Integer) {
-            dpi = ((Integer)value).intValue() / 1024;
-            if (dpi == -1) {
-              dpi = 96;
-            }
-            if (dpi < 50) { /* 50 dpi is the minimum value gnome allows */
-                dpi = 50;
-            }
-            /* The Java rasteriser assumes pts are in a user space of
-             * 72 dpi, so we need to adjust for that.
-             */
-            dsize = ((double)(dpi * size)/ 72.0);
-        } else {
-            /* If there's no property, GTK scales for the resolution
-             * reported by the Xserver using the formula listed above.
-             * fontScale already accounts for the 72 dpi Java 2D space.
-             */
-            dsize = size * fontScale;
-        }
-
-        /* Round size to nearest integer pt size */
-        size = (int)(dsize + 0.5);
         if (size < 1) {
             size = 1;
         }
@@ -193,13 +167,11 @@ class PangoFonts {
         if (FontUtilities.mapFcName(fcFamilyLC) != null) {
             /* family is a Fc/Pango logical font which we need to expand. */
             Font font =  FontUtilities.getFontConfigFUIR(fcFamilyLC, style, size);
-            font = font.deriveFont(style, (float)dsize);
             return new FontUIResource(font);
         } else {
             /* It's a physical font which we will create with a fallback */
             Font font = new Font(family, style, size);
             /* a roundabout way to set the font size in floating points */
-            font = font.deriveFont(style, (float)dsize);
             FontUIResource fuir = new FontUIResource(font);
             return FontUtilities.getCompositeFontUIResource(fuir);
         }
